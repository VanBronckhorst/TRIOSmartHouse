class EMS(const MAX_FROM_HEM):
signature:
	visible: 
		washControl, msgToWash, msgToOven, ovenControl, termPowerConsumption, roomHeating, 
		termalData, hemPower, blackoutReceive, legacyPower1, solarPower, windmillPower, chargeBattery, batteryPower, batteryFull, legacyReq1;
	domains:
		Resp: {Start,Warn};


	items:

		/*
			This event is triggered when a request to execute a task scheduled by the washing machine is received through the HAN
			@param integer: id of the task
			@param TaskType: type of the task, i.e., May or Must
			@param PowerAmount: amount of power requested by the task
			@param natural: amount of time necessary to complete the task
			@param SlotsAmount: maximum number of slots in which a task allowing load shifting can be divided		
			@param DelayAmount: maximum delay between two slots
			@param Bool: 1 if the task allows load shedding, 0 otherwise
			@param Bool: 1 if the task allows load balancing, 0 otherwise
		*/
		event washControl(integer,TaskType,PowerAmount,natural,SlotsAmount,DelayType,Bool,Bool);

		/*
			State that represents tha amount of power provided to the washing machine;
			@param real: tha amount of power provided to the washing machine at any istant
		*/
		state washPower(real);

		/*
			Event triggered when a message is sent to the washing machine through the HAN
			@param Resp: Start if the task can begin the execution, warn if it can't start the execution or if there is a blackout
		*/
		event msgToWash(integer,Resp);
		
		/*
			This event is triggered when a request to execute a task scheduled by the oven is received through the HAN
			@param integer: id of the task
			@param TaskType: type of the task, i.e., May or Must
			@param PowerAmount: amount of power requested by the task
			@param natural: amount of time necessary to complete the task
			@param SlotsAmount: maximum number of slots in which a task allowing load shifting can be divided		
			@param DelayAmount: maximum delay between two slots
			@param Bool: 1 if the task allows load shedding, 0 otherwise
			@param Bool: 1 if the task allows load balancing, 0 otherwise
		*/
		event ovenControl(integer,TaskType,PowerAmount,natural,SlotsAmount,DelayType,Bool,Bool);

		/*
			State that represents tha amount of power provided to the oven;
			@param real: tha amount of power provided to the oven at any istant
		*/
		state ovenPower(real);

		/*
			Event triggered when a message is sent to the oven through the HAN
			@param Resp: Start if the task can begin the execution, warn if there is a blackout
		*/
		event msgToOven(integer,Resp);


		
		/*
			State that represents the amount of power consumed by a legacy device
			@param real: amount of power consumed by a legacy device at any instant
		*/
		state legacyPower1(real);

		state legacyReq1(natural);

		/*
			A state that represents the amount of power produced by the windmill
			@param real: amount of power produced at any istant
		*/
		state windmillPower(real);

		/*
			A state that represents the amount of power produced by the solar panels
			@param real: amount of power produced at any istant
		*/
		state solarPower(real);

		/*
			A state that represents if the amount of power produced and bought is less then the amount of power used
		*/
		state overflow;

		/*
			A state that represents the amount of power bought 
			@param real: amount of power bought at any istant
		*/
		state hemPower(real);

		/*
			A state that represents the total amount of power consumed
			@param real: amount of power consumed at any istant
		*/
		state consumption(real);

		/*
			A state that represents the maximum amount of power that can be connsumed
			@param real: maximum amount of power available at any istant
		*/
		state max(real);

		/*
			A state that represents that a blackout is in progress
		*/
		state blackoutReceive;

		/*
			A state that represents the temperature mesaured by the temperature sensor in each room
			@param natural: number of the room
			@param integer: temperature mesaure in a room at any istant
		*/
		state termalData(natural,integer);

		/*
			A state that represents the temperature treshold of each room; this treshold is used to decide when to start the heating system.
			@param natural: number of the room
			@param integer: temperature treshold in a room at any istant
		*/
		state termThreshold(natural,integer);

		/*
			A state that represents the amount of power consumed by the heating system
			@param real: amount of power consumed at any istant
		*/		
		state termPowerConsumption(real);



		state roomHeating(natural);

		/*
			A state that represents the amount of power drained by the batteries.
			@param real: amount of power drained at any istant
		*/
		state batteryPower(real);

		/*
			A state that represents if the battery is full charged.
		*/
		state batteryFull;

		/*
			A state that represents that the battery is in charge with a given power.
			@param real: the amount of power provided to the battery
		*/
		state chargeBattery(real);

		/*
			A state that represents that the washing machine is executing a task and that a certain amount of time and a certain amount of energy
			is needed to complete the task.
			@param integer: the id of task
			@param real: the amount of time remaining
			@param real: the amount of energy remaining
		*/
		state washState(integer, real, real);


		/*
			A state that represents that the oven  is executing a task and that a certain amount of time and a certain amount of energy
			is needed to complete the task.
			@param integer: the id of task
			@param real: the amount of time remaining
			@param real: the amount of energy remaining
		*/
		state ovenState(integer, real, real);

		/*
			A state use to count how many times a task has been stopped so far.
			@param integer: the id of task
			@param natural: number of times a task was stopped
		*/
		state washStopCounter(integer, natural);



	axioms:
		vars:
		  	resp:Resp;
		  	cons,cons2,a1,a2,a3,a4:real;
		  	maxxx:real;
		  	m,p,p1,t,t1,t2,s,d:real;
		  	i:real;
		  	sh,b: {0..1}

		formulae:

		/*
			This axiom defines three states of the ems:
			1) Consumption: the total consumption, at any istant, is given as the sum of power consumed by the washing machine, by the
			                oven, by the legacy device and by the heating system.
			2) Production: the amount of power produced is the sum of power received from the windmill and the solar panels.
			3) Max: it is the maximum amount of power that can be consumed ad any istant. It is the sum of power produced, the power that the batteries
			        can produce and the power that can be bought from network(MAX_FROM_HEM)
		*/
		ConsumptionDefinition:
		consumption(i) <-> washPower(a1) & ovenPower(a2) & legacyPower1(a3) & termPowerConsumption(a4) (i=a1+a2+a3+a4)  &
		production(i) <-> windmillPower(a1) & solarPower(a2) & (i=a1+a2)  &
		max(i) <-> production(a) & batteryPower(b) & (i = a + b + MAX_FROM_HEM) &
		consumption(cons) & consumption(cons2) -> cons2=cons &
		production(cons) & production(cons2)-> cons=cons2;


		/*
			Defines that all the states that represents a power erogated or supplied are true only for 1 value at any moment
		*/
		PowerUnicity:
		washPower(cons) & washPower(cons2)-> cons=cons2 &
		ovenPower(cons) & ovenPower(cons2)-> cons=cons2 &
		windmillPower(cons) & windmillPower(cons2)-> cons=cons2 &
		solarPower(cons) & solarPower(cons2)-> cons=cons2 &
		batteryPower(cons) & batteryPower(cons2)-> cons=cons2 &
		legacyPower1(cons) & legacyPower1(cons2)-> cons=cons2 &
		hemPower(cons) & hemPower(cons2)-> cons=cons2 &
		legacyReq1(cons) & legacyReq1(cons2)-> cons=cons2 &
		washState(i,t,e) & washState(i,t1,e1) -> t=t1 & e=e1 &
		ovenState(i,t,e) & ovenState(i,t1,e1) -> t=t1 & e=e1 &
		washStopCounter(i,nstop) & washStopCounter(i,nstop2) -> nstop2=nstop 

		/*
			This axiom defines the various kind of response that the EMS can send to the devices. Various scenarios are possible:
			1) May task: -  if there is a sufficient amount of power remaining to start the task, then a positive message is sent to the device and the 
			                power is set to the required one.
						 -  if the avalaible power is less than the required one and the task can be balanced, if there exist a power p1 included between
						    0 and the required power such that the power threshold is not exceeded, a positive message is sent to the device and the 
						    power is set to p1
						 -  if the requested task can't be balanced because there is no sufficient power to balance it or because it doesn't allow load 
						 	balancing, then a warning is sent to the device and no power is given to the device. Sooner or later the task will start 
						 	anyway in order to respect one of the requested property: a given task must finish.
			2) Must task: - a must task doesn't allows load balancing, shedding or shifting and can't be postponed. So, when a must request is received,
							a positive message is sent the device and the power is set to the required one
		*/
		ResponsesFromEMS:
		washControl(i,May,p,t,s,d,sh,b) & consumption(cons) & max(maxxx) & (cons + p < maxxx)  -> (msgToWash(i,Start) & washPower(p) & washStopCounter(i,0) & washState(i,t,p*t)) &
		washControl(i,Must,p,t,s,d,sh,b) -> msgToWash(i,Start) & washPower(p) & washStopCounter(i,0) & washState(i,t,p*t) &
		washControl(i,May,p,t,s,d,sh,0) & consumption(cons) & (cons + p > max)  -> (msgToWash(i,Warn) & washPower(0) & SomF(msgToWash(i,Start) & washPower(p) & washStopCounter(i,0) & washState(i,t,p*t)) &
		washControl(i,May,p,t,s,d,sh,1) & consumption(cons) & not ex(p1)(0<p1<p & (cons + p1 < max))  -> (msgToWash(i,Warn) & washPower(0) & SomF(msgToWash(i,Start) & washPower(p1) & washStopCounter(i,0) & washState(i,t,p*t)) &
		washControl(i,May,p,t,s,d,sh,1) & consumption(cons) & max(maxxx) & ex(p1)(0<p1<p & (cons + p1 < maxxx))  ->  msgToWash(i,Start) & washPower(p1) & washStopCounter(i,0) & washState(i,t,p*t)

	
		/*
			Defines that if a starting message is sent to the washing machine than a certain amount of power greater than 0 is provided to the device. 
			If the request is to execute a must task, or in the past there was a request to execute that must task, but was interrupted for a blackout, 
			than the power provided to the device is exactly the required one. 
		*/		
		WashStartMsgConditions:
		msgToWash(i,Start) -> washPower(p) & p>0
        msgToWash(i,Start) & (washControl(i,Must,p,t,s,d,sh,b) | SomP(washControl(i,Must,p,t,s,d,sh,b))) -> washPower(p)

		/*
			Defines that if a starting message was sent to the oven than there is a request to execute that task or there was a request to execute 
			that task, but was interrupted because of a blackout, than the power provided to the device is exactly the required one.
		*/
		OvenStartMsgConditions:
		msgToOven(i,Start) & (ovenControl(i,Must,p,t,s,d,sh,b) | SomP(ovenControl(i,Must,p,t,s,d,sh,b))) -> ovenPower(p)


		/* 
			Defines that power is provided to a device only it has previously sent a request 
		*/
		PowerIfRequested:
		ovenPower(p) & p>0 -> SomP(ovenControl(i,Must,p,t,s,d,sh,b)) &
		washPower(p1) & p1>0 -> SomP(washControl(i,May,p,t,s,d,sh,b) & (p<>p1 -> b=1)


		/*
			Ensures that for every request a message is sent back
		*/
		ResponseEnsurance:
		washControl(i,m,p,t,s,d,sh,b)->msgToWash(resp)
		ovenControl(i,m,p,t,s,d,sh,b)->msgToOven(resp)

		/*
			This formula specifies that:
			1) the consumption at any istant is less than or equal to the sum of the power produced, bought and received from the batteries.
			2) if the amount of power consumed is equal to the power produced by the windmill and the solar panels then the power received from the network
			   and from the batteries is equal to 0.
			3) if the power received from the network is greater than the maximum amount of power that can be bought, then we are in overflow.
			4) if the power produced is less than the power produced and the batteries are not full, then the exceeding power is used to charge the batteries.
		*/
		PowerBalance:
		consumption(con) & production(prod) & hemPower(bought) & batteryPower(bat) -> con<=production+bought+bat &
		(washPower(w) & ovenPower(o) & termPowerConsumption(tp) & legacyPower1(l) & windmillPower(p) & solarPower(s) & (w+o+l+tp=p+s)) -> (hemPower(0) & batteryPower(0)) &
		(hemPower>=MAX_FROM_HEM) -> overflow &
		(washPower(w) & ovenPower(o) & termPowerConsumption(tp) & legacyPower1(l) & windmillPower(p) & solarPower(s) & (w+o+l+tp<p+s)) -> chargeBattery(i) & i=p+s) ;

		/*
			If there is an overflow, and a sheddable task is in execution, than this task is interrupted(power set to 0) and a warning message is sent
			to the device
		*/
		OverflowMeasuresShed:
		overflow & washState(i,t,e) & SomP(washControl(i,May,p,t,s,d,1,b)) ->  msgToWash(i,Warn) & NowOn(washPower(0));

		/*
			Defines that if there is an overflow, and a task that can be shifted is in execution and it wasn’t stop more than the number of allowed stop,
			 than this task is interrupted (power set to 0) for at most the maximum amount of time specified in the initial request.
		*/
		OverflowMeasuresShift:
		overflow & washState(i,t,e) & stopCounter(i,nstop) & SomP(washControl(i,May,p,t,s,d,sh,b)) & s>nstop & washPower(i) & i>0 -> (Lasts(washPower(0),d) | WithinF(consumption+p<maxxx & max(maxxx),d) ) &
		consumption(cons) & (cons+p<max) & washState(i,t) & SomP(washControl(i,May,p,t1,s,d,sh,b)) & t>0 & washPower(0) -> NowOn(washPower(p))
		
		/*
			If an overflow is in progress and it is in execution a task that can be balanced and exist a power that allows to not overcome the power threshold,
			then the task is executed using this power.
			In our system only task scheduled by the washing machine and the heating system can be balanced
		*/
		OverflowMeasuresBalance:
		overflow & washState(i,t1,e) & t1>0 & SomP(washControl(i,May,p,t,s,d,sh,1)) & washPower(nowWash) & nowWash > 0 & max(tot)& ex(z)(z>0 & z<p & consumption(now) & (now-nowWash+z=tot) )  -> NowOn(washPower(z))
		overflow & ex(i)(roomHeating(i) & termPowerConsumption(nowTerm) & nowTerm > 0  & max(tot) & ex(z) (z>0 & consumption(now) & (now-nowTerm+z<=tot)) -> NowOn(termPowerConsumption(z))

		/*
			Defines a counter that counts the number of time a task is stopped. Firstly it specifies that if a counter is counting the number of stop of
			a certain task, than the device is executing that task (washState keeps track of the current task in execution). Secondly, it specifies 
			that the counter start from zero. Thirdly it defines how the counter is incremented, that is: if a task is in execution and up to now a certain 
			amount of power is provided to the device and there isn’t a blackout in progress and now the amount of power provided to the device is 0, than 
			the counter should be incremented by one unit. Lastly it defines that if the counter is true for a certain task and for a certain number of stops
			greater than zero, than the task must be a “May” task.
		*/
		WashStopCounterDefinition:
		washStopCounter(i,nstop) -> washState(i,t,e) & t>0 & e>0
		washStopCounter(i,nstop) -> SomP(washStopCounter(i,0))
		washState(i,t,e) & e>0 & t>0 & washPower(0) & not(blackoutReceive) & UpToNow(washPower(p) & p!=0) & UpToNow(stopCounter(i,nstop)) -> NowOn(stopCounter(i,nstop+1))
		washStopCounter(i,nstop) & nstop > 0 -> SomP(requestTask(i,May,p,tot,s,d,sh,b) & s > 0)

		/*
			Defines the state washState that keeps track of the current task in execution. The state washState has three arguments, the task id, 
			the amount of time remaining for the completion of the task and the amount of energy necessary to complete the task. It specifies that 
			energy and time will become 0 in the future except when the task allows load shedding. It then defines the monotonicity of the energy. 
			Lastly it defines how the energy value and the time parameter change and how the energy and time parameters are correlated.
		*/
		WashStateDefinition:
		washState(i,t,e) & e>0 & t>0 & not(SomP(washControl(i,m,p,t,s,d,sh,1))) -> SomF(washState(i,0,0)) 
		UpToNow(washState(i,t,e)) -> Until(washState(i,t1,e1) & e1<=e,(msgToWash(i2,Start) & i2<>i)) &
		Past(washState(i,t,e),t1) & Lasted(washPower(p),t1) -> washState(i,t2,e1) & e1=e-p*t1 & t2=e1/p;

		/*
			Defines the state ovenState that keeps track of the current task in execution. The state ovenState has three arguments, the task id, 
			the amount of time remaining for the completion of the task and the amount of energy necessary to complete the task. It specifies that 
			energy and time will become 0 in the future except when the task allows load shedding. It then defines the monotonicity of the energy. 
			Lastly it defines how the energy value and the time parameter change and how the energy and time parameters are correlated.
		*/
		OvenStateDefinition:
		ovenState(i,t,e) & e>0 & t>0 & not(SomP(ovenControl(i,m,p,t,s,d,sh,1))) -> SomF(ovenState(i,0,0) 
		UpToNow(ovenState(i,t,e)) -> Until(ovenState(i,t1,e1) & e1<=e,(msgToOven(i2,Start) & i2<>i)) &
		Past(ovenState(i,t,e),t1) & Lasted(ovenPower(p),t1) -> ovenState(i,t2,e1) & e1=e-p*t1 & t2=e1/p;
		
		/*
			if a blackout is in progress the cosumption is set to 0 and a warning message is sent to the devices that are connected through the HAN.
		*/	
		OnBlackout:
		blackoutReceive & ovenState(i,t,e) & washState(i1,t1,e1) -> consumption(0) & msgToWash(i,Warn) & msgToOven(i1,Warn);

		/*
			If a blackout is just finished, and some tasks were executing before the blackout then a message to all the devices with pending task is sent,
			in order to resume the execution.
		*/
		RestoreFromBlackout:
		UpToNow(blackoutReceive) & NowOn(not blackoutReceive) -> (ex(p)(legacyReq1(p))-> legacyPower1(p)) & (ex(i,t,e)(washState(i,t,e)&t>0&e>0)-> msgToWash(i,Start)) & (ex(i,t,e)(ovenState(i,t,e)&t>0&e>0)-> msgToOven(i,Start)); 

		/*
			This formula specifies that if there exist a sensor that perceive a temperature below a certain treshold in a room than we start to heat
			that room
		*/
		TermalAlarm:
		ex(i,t,t2)(termalData(i,t) & termThreshold(i,t2) & t<t2) <-> roomHeating(i)

end




