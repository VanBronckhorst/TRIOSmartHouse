class Device( const MaxPower,const MaxSlots,const MaxDelay):
signature:
visible:
    msgFromEMS,powerSupplied,requestTask;

domains:
	SlotsType: 1..MaxSlots;
	PowerType: 1..MaxPower;
	DelayType: 1..MaxDelay;
	Bool:0..1;
	TaskType: {May,Must};
	Resp: {Go,Warn};

items:

	/*

	*/
	event msgFromEMS(integer,Resp);
	/*
		Represents the amount of power given to the device at every moment
	*/
	state powerSupplied(PowerType);
	/*
		This event sends the task to the HAN at the moment it is scheduled to start
		(id,MAy/Must,powerReq,Time,MaxofSlots,MaxDelay,Sheddable,Balanceable)
	*/
	event requestTask(integer,TaskType,PowerType,natural,SlotsType,DelayType,Bool,Bool);

	state performingTask(integer,natural);

	state stopCounter(integer,natural);

axioms:

formulae:

	/*
		Defines the task id
	*/
	TaskIdDef:
		(requestTask(i,m,p,t,s,d,sh,b) & SomP(requestTask(i2,m2,p2,t2,s2,d2,sh2,b2)) & all(i3)(i3>i2-> not ex(m3,p3,t3,s3,d3,sh3,b3)(requestTask(i3,m3,p3,t3,s3,d3,sh3,b3)) )) -> (i=i2+1) &
		(requestTask(i,m,p,t,s,d,sh,b) & not SomP(requestTask(i2,m2,p2,t2,s2,d2,sh2,b2)) -> i=1 &
		requestTask(i,m,p,t,s,d,sh,b) -> not SomF(requestTask(i,m2,p2,t2,s2,d2,sh2,b2));
	
	NotRequestWhileWorking:
		requestTask(i,m,p,t,s,d,sh,b) -> not ex(i2)((i2<>i1)& performingTask(i2,t2)&t2>0); 

	NoConsecutiveRequests:
		requestTask(i,m,p,t,s,d,sh,b) -> Until( not ex(i2,m2,p2,t2,s2,d2,sh2,b2)(requestTask(i2,m2,p2,t2,s2,d2,sh2,b2)) , msgFromEMS(i,resp))	

	/*
		Ensures that if a must request has been sent the task will be executed
	*/
	MustInsurance:
		requestTask(i,Must,p,t,s,d,0,0)-> (not Within(msgFromEMS(i,Warn),t+MAX_DELAY) -> SomF(Lasts(powerSupplied(p),t)));

	/*
 		Ensures completion of all non sheddable tasks
	*/
 	MustEndIfNotSheddable:	
 		requestTask(i,m,p,t,s,d,0,b) -> SomF(performingTask(i,0));
	/*
	    Ensures a response from the EMS in MAX_DELAY time
	*/	
	Response:
		requestTask(i,m,p,t,s,d,sh,b)-> Within(msgFromEMS(i,s),MAX_DELAY);

	ResponseStartSupply:
		msgFromEMS(i,Start)&requestTask(i,Must,p,t,s,d,sh,0)-> Lasts(powerSupplied(p),t) | WithinF(msgFromEMS(i,Warn),t) &
		msgFromEMS(i,Start)&requestTask(i,m,p,t,s,d,sh,b) -> performingTask(i,t);

	TimeToLiveDefinition:
		(performingTask(i,t) & t>0) -> SomF(performingTask(i,0) | SomP(requestTask(i,m,p,t1,s,d,1)) &
		UpToNow(performingTask(i,t)) -> ((performingTask(i,t1) & t1<=t) |  (msgFromEMS(i2,Start) & i2<>i)) &
		Past(performingTask(i,t),timePassed) & SomP(requestTask(i,m,p,tot,s,d,sh),b) & Lasted(powerSupplied(p),timePassed) -> (performingTask(i,ttl)& ttl=t-timePassed)

	/*
	  Defines that, if there's a power shortage during the execution the task must have been a delayable one
	*/
	ShiftDefinition:
		performingTask(i,t) & t>0 & powerSupplied(0) & UpToNow(stopCounter(i,k))-> SomP(requestTask(i,May,p,tot,s,d,sh,b)) & s>1 & d>0 & k+1 < s & NowOn(stopCounter(i,k+1))	&
		performingTask(i,t) & t>0 & Lasted(powerSupplied(0),pause) & pause>0 -> SomP(requestTask(i,May,p,tot,s,d,sh,b))& s>1 & d>=pause

	/*
		if the task is not balanceable then the power supplied must always be equal to the requested
	*/
	NonBalanceableDef:
	    performingTask(i,t) & SomP(requestTask(i,May,p,tot,s,d,sh,0))-> powerSupplied(0) | powerSupplied(p) ;


