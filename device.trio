class Device( const MaxPower,const MaxSlots,const MaxDelay):

	signature:
		visible:
			/* 
				inputs
			*/
		    msgFromEMS,powerSupplied,
		    /*
		    	outputs
		    */
		    requestTask;

		domains:
			SlotsAmount: 1..MaxSlots;
			PowerAmount: 1..MaxPower;
			DelayAmount: 1..MaxDelay;
			Bool:0..1;
			TaskType: {May,Must}; 
			Resp: {Start,Warn};

		items:

			/*
				This event is triggered when the device received a message from the ems
				@param integer: id of the task that is waiting for a response
				@param Resp: the response of the Ems. Start means that the device can start the task, Warn means that
				the task can't start because of an overload.
			*/
			event msgFromEMS(integer,Resp);

			/*
				Represents the amount of power given to the device at every moment.
				@param PowerAmount: the amount of power provided to the device.
			*/
			state powerSupplied(PowerAmount);

			/*
				This event sends the task to the HAN at the moment it is scheduled to start
				@param integer: id of the task
				@param TaskType: type of the task, i.e., May or Must
				@param PowerAmount: amount of power requested by the task
				@param natural: amount of time necessary to complete the task
				@param SlotsAmount: maximum number of slots in which a task allowing load shifting can be divided
				@param DelayAmount: maximum delay between two slots
				@param Bool: 1 if the task allows load shedding, 0 otherwise
				@param Bool: 1 if the task allows load balancing, 0 otherwise
			*/
			event requestTask(integer,TaskType,PowerAmount,natural,SlotsAmount,DelayType,Bool,Bool);

			
			/*
				State that takes into account the amount of time remaining to complete a task.
				@param integer: id of the task
				@param real: amount of time remaining to complete the task
			*/
			state performingTask(integer,real);
			
			/*
				This state represents the aumount of energy remaining to complete a task;
				@param integer: the id of the task
				@param real: the amount of energy necessary to complete the task (Energy = power*time)
			*/
			state remainingEnergy(integer,real);

			/*
				Counter that counts the number of time a task is stopped
				@param integer: id of the task
				@param natural: noumber of time a task has been stopped so far
			*/
			state stopCounter(integer,natural);

		axioms:
			vars:
				i, i1: natural;
				m,m2: TaskType;
				p,p2: PowerAmount;
				t,t2,tot: natural;
				s,s2: SlotsAmount;
				d,d2: DelayType;
				sh,sh2: Bool;
				b,b2: Bool;
				resp: Resp;
				e: real;
				k: natural;
				pause: real;


			formulae:


				/*
					Defines the task id
				*/
				TaskIdDef:
					(requestTask(i,m,p,t,s,d,sh,b) & SomP(requestTask(i2,m2,p2,t2,s2,d2,sh2,b2)) & all(i3)(i3>i2-> not ex(m3,p3,t3,s3,d3,sh3,b3)(requestTask(i3,m3,p3,t3,s3,d3,sh3,b3)) )) -> (i=i2+1) &
					(requestTask(i,m,p,t,s,d,sh,b) & not SomP(requestTask(i2,m2,p2,t2,s2,d2,sh2,b2)) -> i=1 &
					requestTask(i,m,p,t,s,d,sh,b) -> not SomF(requestTask(i,m2,p2,t2,s2,d2,sh2,b2));
				
				/*
				 	A device can't execute two task in the same time, so a request to the ems is sent only if there isn't any running task
				*/
				NotRequestWhileWorking:
					requestTask(i,m,p,t,s,d,sh,b) -> not ex(i1)(performingTask(i1,t2) & t1>0); 

				
				/*
					A device can't execute two task in the same time, so a request can only be sent if no other request is pending, that is, a request
					to perform a task is waiting for a response from the ems
				*/
				NoConsecutiveRequests:
					requestTask(i,m,p,t,s,d,sh,b) -> Until( not ex(i2,m2,p2,t2,s2,d2,sh2,b2)(requestTask(i2,m2,p2,t2,s2,d2,sh2,b2)) , msgFromEMS(i,resp))	

				/*
					Ensures that if a must request has been sent the task will be executed. The task will start after MAX_DELAY from the request, that is,
					after the network delay. Since a must task can't be shed, shift or balanced, the power is supplied to the device executing the task
					for exactly t time units, i.e., the time necessary to complete the task. The only exception is in case of a blackout; in that case
					a warning message is sent to the device.
				*/
				MustInsurance:
					requestTask(i,Must,p,t,s,d,sh,b) -> (not Within(msgFromEMS(i,Warn),t+MAX_DELAY) -> Futr((Lasts(powerSupplied(p),t)),MAX_DELAY));

				/*
			 		Ensures completion of all non sheddable tasks
				*/
			 	MustEndIfNotSheddable:	
			 		requestTask(i,m,p,t,s,d,0,b) -> SomF(performingTask(i,0));
				
				

				/*
				 	If the EMS sent a response then the device has asked that task before
				*/
				ResponseGeneratedByRequest:
					msgFromEMS(i,resp) -> SomP(requestTask(i,m,p,t,st,d,sh,b))
				
				/*
					Ensure that if the EMS send a start message a MUST task is executed without load balancinc,shedding or shifting.
					It also ensures that the state remainingEnergy is set to the right value. 
				*/
				ResponseStartSupply:
					msgFromEMS(i,Start)& Past(requestTask(i,m,p,t,s,d,sh,b),MAX_DELAY) & UpToNow(not performingTask(i,t2)) -> NowOn(performingTask(i,t)) & powerSupplied(p1) & p1>0;
					
				/*
				*/
				StartAfterBlackout:
					msgFromEMS(i,Start) & SomP(msgFromEMS(i,Warn)) & performingTask(i,t2) -> powerSupplied(p) & p>0;

				ResponseMustStartSupply:
					msgFromEMS(i,Start) & Past(requestTask(i,Must,p,t,s,d,sh,0),MAX_DELAY) -> Lasts(powerSupplied(p),t) | WithinF(msgFromEMS(i,Warn),t) 

				PowerIfExecuting:
					powerSupplied(p) -> performingTask(i,t) & t > 0 & SomP(requestTask(i,m,p1,t,s,d,sh,b))

				WarningMessage:
					msgFromEMS(i,Warn) -> performingTask(i,t) & powerSupplied(0);

				PerformingOnlyIfRequest:
					performingTask(i,t) <-> SomP(requestTask(i,m,p,t,s,d,sh,b)) & SomP(msgFromEMS(i,Start));

				/*
					It defines the time to live of a task that is contained in the state performingTask(i,t)
				*/
				TimeToLiveDefinition:
					remainingEnergy(i,e) <-> performingTask(i,t) & powerSupplied(p) & t = e/p;

				/*
					It defines the amount of energy necessary to complete the task. It ensures that if the remaining energy is greater than 0
					then it will become 0 sooner or later or the task allows load shedding.
					It defines also the evolution of the remaining energy state: it is a monotonic function. 
					Finally it "computes" the value of remaining energy.
				*/
				RemainingEnergyDefinition:
					(remainingEnergy(i,e) & e>0) & not(SomP(requestTask(i,m,p,t,s,d,sh,1))) -> SomF(remainingEnergy(i,0) &
					UpToNow(remainingEnergy(i,e)) -> Until(remainingEnergy(i,e1) & e1<=e,(msgFromEMS(i2,Start) & i2<>i)) &
					Past(remainingEnergy(i,e),t) & Lasted(powerSupplied(p),t) -> remainingEnergy(i,e1) & e1 = e - p*t;
				
				/*
				  Defines that, if there's a power shortage during the execution the task must have been a delayable one and that the task is not divided in more than
				  the maximum number of slots and that the idle phase is not longher than the maximum duration of the idle phase.
				*/
				ShiftDefinition:
					performingTask(i,t) & t>0 & powerSupplied(0) & UpToNow(stopCounter(i,k))-> SomP(requestTask(i,May,p,tot,s,d,sh,b)) & s>1 & d>0 & k+1 < s & NowOn(stopCounter(i,k+1))	&
					performingTask(i,t) & t>0 & Lasted(powerSupplied(0),pause) & pause>0 -> SomP(requestTask(i,May,p,tot,s,d,sh,b))& s>1 & d>=pause

				/*
					if the task is not balanceable then the power supplied must always be equal to the requested or to 0 in case of blackout
					or in case the task is completed.
				*/
				NonBalanceableDef:
				    performingTask(i,t) & SomP(requestTask(i,May,p,tot,s,d,sh,0))-> powerSupplied(0) | powerSupplied(p) ;


