class HEM(const MAX_POW,const MAX_TIME,const MAX_OVF):
signature:
    visible powerErogated, blackout, manualRestore;
{}
    items:

        /*
            This state represents the amount of power erogated by the HEM, i.e., the amount of power bought from the electrical company at any istant.
            @param real: the amount of power erogated.
        */
        state powerErogated(real);

        /*
            State that represents if a blackout is in progress. The EMS will take care of all the consequences of a blackout
        */
        state blackout;

        /*
            Event triggered by a human using a manual switch not modeled here.
        */
        event manualRestore;

    axioms:

    formulae:

        vars i,i1: real;

        /*
            This axioms guarantees a safety property. If the power provided by the network is more than the maximum power that can be bought multiplied with 
            a certain threshold, than there is an immediate blackout
        */
        PowerErogatedDefinition:
    	powerErogated(i) &  i > MAX_POW*MAX_OVF  -> blackout


        /*
            This axioms guarantees a safety property. If the power provided by the network is more than the maximum power that can be bought for a certain
            amount of time than there is a blackout.
            If there is a blackout than the power absorbed is equal to 0.
            The blackout states hold until there is a manual restore.
        */
        BlackoutDefinition:
    	Lasted(powerErogated(i)) &  i>MAX_POW, MAX_TIME) -> blackout
    	blackout -> powerErogated(0)
    	blackout -> Until(blackout,manualRestore)
    	blackout & manualRestore -> not blackout

        /*
            Uniqueness of power
        */
        PowerUnicity:
        powerErogated(i) & powerErogated(i1) -> i=i1; 
end